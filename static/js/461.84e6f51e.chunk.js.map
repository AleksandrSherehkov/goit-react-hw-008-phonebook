{"version":3,"file":"static/js/461.84e6f51e.chunk.js","mappings":"gMAEaA,E,QAAYC,GAAAA,EAAQC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mEACtB,SAAAC,GAAQ,OAAAA,EAALC,MAAkBC,OAAOC,GAAG,IAE3B,SAAAC,GAAQ,OAAAA,EAALH,MAAkBI,UAAUC,CAAC,I,SCDlCC,EAAY,SAAHP,GAAkB,IAAZQ,EAAIR,EAAJQ,KAC1B,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAACF,KAAMA,EAAMG,OAAQ,SAAAC,GAAO,OAAIH,EAAAA,EAAAA,KAACb,EAAS,CAAAiB,SAAED,GAAoB,GACtF,C,kKCJaE,EAAgBC,EAAAA,KAAaC,MAAM,CAC9CR,KAAMO,EAAAA,KAEHE,KAAK,OAAQ,+CAA+C,SAAAC,GAC3D,OAAIA,GACKA,EAAMC,SAAWD,CAG5B,IACCE,SAAS,kBACTC,IAAI,GAAI,oDACXC,OAAQP,EAAAA,KAELK,SAAS,kBACTH,KAAK,OAAQ,+CAA+C,SAAAC,GAC3D,OAAIA,GACKA,EAAMC,SAAWD,CAG5B,IACCK,QACC,sBACA,wF,qECTOC,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,QAAQ,IAavDG,EAAqB,SAAAZ,GACzBS,EAASI,MAAK,SAAAC,GAAO,OAAIA,EAAQxB,KAAKyB,gBAAkBf,EAAMV,KAAKyB,aAAa,IAC5EC,EAAAA,OAAAA,QAAe,GAADC,OAAIjB,EAAMV,MAAQ,4CAA6C,MAC7EiB,GAASW,EAAAA,EAAAA,IAAgBlB,GAC/B,EAEA,OACET,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACC,MAAM,WAAUzB,UACvBJ,EAAAA,EAAAA,KAAC8B,EAAAA,GAAM,CACLC,cApBgB,CACpBhC,KAAM,GACNc,OAAQ,IAmBJmB,iBAAkB3B,EAClB4B,SAjBe,SAACxB,EAAKlB,GAAqB,IAAjB2C,EAAS3C,EAAT2C,UAC7Bb,EAAmBZ,GAEnByB,GACF,EAa6B9B,UAEvB+B,EAAAA,EAAAA,MAACC,EAAAA,GAAU,CAACC,aAAa,MAAKjC,SAAA,EAC5B+B,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,WAAW,aAAaC,cAAc,SAASC,GAAG,QAAOrC,SAAA,EAC5DJ,EAAAA,EAAAA,KAAC0C,EAAAA,EAAI,CAACC,SAAS,IAAIC,MAAM,QAAQH,GAAG,OAAMrC,SAAC,UAG3CJ,EAAAA,EAAAA,KAAC6C,EAAAA,GAAW,CACVC,KAAK,OACL/C,KAAK,OACL8B,MAAM,yIACNlB,UAAQ,KAEVX,EAAAA,EAAAA,KAACF,EAAAA,EAAS,CAACC,KAAK,aAElBoC,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,WAAW,aAAaC,cAAc,SAASC,GAAG,QAAOrC,SAAA,EAC5DJ,EAAAA,EAAAA,KAAC0C,EAAAA,EAAI,CAACC,SAAS,IAAIC,MAAM,QAAQH,GAAG,OAAMrC,SAAC,YAG3CJ,EAAAA,EAAAA,KAAC6C,EAAAA,GAAW,CACVC,KAAK,MACL/C,KAAK,SACL8B,MAAM,+FACNlB,UAAQ,KAEVX,EAAAA,EAAAA,KAACF,EAAAA,EAAS,CAACC,KAAK,eAElBoC,EAAAA,EAAAA,MAACY,EAAAA,GAAY,CAACD,KAAK,SAAQ1C,SAAA,EACzBJ,EAAAA,EAAAA,KAACgD,EAAAA,IAAoB,CAACC,KAAM,KAAM,uBAO9C,E,mBC1EaC,EAAc9D,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oQAUxB,SAAAC,GAAQ,OAAAA,EAALC,MAAkBI,UAAUC,CAAC,I,UCVlCsD,EAAiB,SAAA/B,GAAK,OAAIA,EAAMF,SAASA,QAAS,EAClDkC,EAAe,SAAAhC,GAAK,OAAIA,EAAMF,SAASmC,MAAO,EAE9CC,GAAyBC,EAAAA,EAAAA,IACpC,CAACJ,EAAgBC,IACjB,SAAClC,EAAUmC,GACT,OAAOnC,EAASmC,QAAO,SAAA9D,GAAO,OAAAA,EAAJQ,KAAgByB,cAAcgC,SAASH,EAAO7B,cAAc,GACxF,I,8BCNWiC,GAAWrE,EAAAA,EAAAA,IAAOsE,EAAAA,IAAPtE,CAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4DAI3B,SAAAC,GAAQ,OAAAA,EAALC,MAAkBC,OAAOkE,MAAM,IAGhCC,EAAcxE,EAAAA,GAAAA,OAAayE,IAAAA,GAAAvE,EAAAA,EAAAA,GAAA,yUAW7B,SAAAK,GAAQ,OAAAA,EAALH,MAAkBC,OAAOkE,MAAM,IAOhC,SAAAG,GAAQ,OAAAA,EAALtE,MAAkBC,OAAOsE,gBAAgB,ICpB5CC,EAAU,SAAHzE,GAA4D,IAAD0E,EAAA1E,EAArDgC,QAAW2C,EAAED,EAAFC,GAAInE,EAAIkE,EAAJlE,KAAMc,EAAMoD,EAANpD,OAAUsD,EAAe5E,EAAf4E,gBACvD,OACEhC,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAAC8B,eAAe,eAAeC,MAAM,QAAQC,GAAG,QAAQ7B,GAAG,KAAIrC,SAAA,EACjE+B,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACiC,QAAS,EAAGH,eAAe,aAAaC,MAAM,QAAOjE,SAAA,EACxDJ,EAAAA,EAAAA,KAACyD,EAAQ,KACTzD,EAAAA,EAAAA,KAAC0C,EAAAA,EAAI,CAACC,SAAS,IAAI6B,WAAW,OAAO5B,MAAM,QAAOxC,SAC/CL,QAGLoC,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACiC,QAAS,EAAGH,eAAe,aAAaC,MAAM,QAAOjE,SAAA,EACxDJ,EAAAA,EAAAA,KAACyE,EAAAA,IAAW,KACZzE,EAAAA,EAAAA,KAAC0C,EAAAA,EAAI,CAACC,SAAS,IAAI6B,WAAW,OAAO5B,MAAM,QAAOxC,SAC/CS,QAGLb,EAAAA,EAAAA,KAAC4D,EAAW,CAACnB,GAAG,SAASK,KAAK,SAAS4B,QAAS,kBAAMP,EAAgBD,EAAG,EAAC9D,UACxEJ,EAAAA,EAAAA,KAAC2E,EAAAA,IAAO,QAIhB,ECrBaC,EAAc,WACzB,IAAM5D,GAAWC,EAAAA,EAAAA,MACX4D,GAAmB1D,EAAAA,EAAAA,IAAYmC,GAE/BwB,EAAsB,SAAAC,GAC1B/D,GAASgE,EAAAA,EAAAA,IAAmBD,GAC9B,EAEA,OACE/E,EAAAA,EAAAA,KAACsC,EAAAA,EAAG,CAAC2C,GAAI,EAAGzC,cAAc,SAAS+B,QAAS,EAAG9B,GAAG,KAAIrC,SACnDyE,EAAiBK,KAAI,SAAA3D,GAAO,OAC3BvB,EAAAA,EAAAA,KAACgE,EAAO,CAAkBzC,QAASA,EAAS4C,gBAAiBW,GAA/CvD,EAAQ2C,GAA8D,KAI5F,ECnBaiB,EAAU,SAAH5F,GAAkB,IAAZ6F,EAAI7F,EAAJ6F,KACxB,OAAOpF,EAAAA,EAAAA,KAAC0C,EAAAA,EAAI,CAAAtC,SAAEgF,GAChB,ECQaC,EAAS,WACpB,IAAMnE,GAAWC,EAAAA,EAAAA,IAAYgC,GACvBnC,GAAWC,EAAAA,EAAAA,MACXoC,GAASlC,EAAAA,EAAAA,IAAYiC,GAI3B,OACEjB,EAAAA,EAAAA,MAACP,EAAAA,EAAO,CAACC,MAAM,gBAAezB,SAAA,EAC5B+B,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACgD,GAAI,EAAG/C,WAAW,aAAaC,cAAc,SAASC,GAAG,QAAOrC,SAAA,EACnEJ,EAAAA,EAAAA,KAAC0C,EAAAA,EAAI,CAACC,SAAS,IAAIC,MAAM,QAAOxC,SAAC,2BAGjCJ,EAAAA,EAAAA,KAACkD,EAAW,CACVJ,KAAK,OACLrC,MAAO4C,EACPkC,YAAY,aACZxF,KAAK,SACLyF,SAbkB,SAAHjG,GAAA,IAAuBkB,EAAKlB,EAAtBkG,cAAiBhF,MAAK,OAASO,GAAS0E,EAAAA,EAAAA,GAAUjF,GAAQ,OAgBlFS,EAASyE,OAAS,GAAI3F,EAAAA,EAAAA,KAAC4E,EAAW,KAAM5E,EAAAA,EAAAA,KAACmF,EAAO,CAACC,KAAK,6BAG7D,E,UC9BaQ,EAAe,WAC1B,IAAM5E,GAAWC,EAAAA,EAAAA,MAKjB,OAJA4E,EAAAA,EAAAA,YAAU,WACR7E,GAAS8E,EAAAA,EAAAA,MACX,GAAG,CAAC9E,KAGFmB,EAAAA,EAAAA,MAAA4D,EAAAA,SAAA,CAAA3F,SAAA,EACEJ,EAAAA,EAAAA,KAACe,EAAW,KACZf,EAAAA,EAAAA,KAACqF,EAAM,MAGb,EAEA,G","sources":["components/FormError/FormError.styled.js","components/FormError/FormError.jsx","services/validation/validationSchema.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","redux/contacts/selectors.js","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Message/Message.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorText = styled.p`\n  color: ${({ theme }) => theme.colors.red};\n  font-style: italic;\n  font-size: ${({ theme }) => theme.fontSizes.s};\n`;\n","import PropTypes from 'prop-types';\nimport { ErrorMessage } from 'formik';\nimport { ErrorText } from 'components/FormError/FormError.styled';\n\nexport const FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>} />;\n};\n\nFormError.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n","import * as yup from 'yup';\n\nexport const contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  number: yup\n    .string()\n    .required('required field')\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .matches(\n      /^\\d{3}-\\d{3}-\\d{4}$/,\n      'The phone number must contain 7 digits and have the following format: xxx-xxx-xxxx'\n    ),\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport { BsFillPersonPlusFill } from 'react-icons/bs';\n\nimport { Report } from 'notiflix';\n\nimport { contactSchema } from 'services/validation/validationSchema';\n\nimport { Box } from 'services/styles/Box';\nimport { Text } from 'services/styles/Text';\nimport { ButtonStyled, FieldStyled, FormStyled } from 'components/ContactForm/ContactForm.styled';\nimport { FormError } from 'components/FormError/FormError';\nimport { addContactThunk } from 'redux/contacts/operations';\nimport { Section } from 'components/Section/Section';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const hendleSubmit = (value, { resetForm }) => {\n    checkAndAddContact(value);\n\n    resetForm();\n  };\n\n  const checkAndAddContact = value => {\n    contacts.some(contact => contact.name.toLowerCase() === value.name.toLowerCase())\n      ? Report.warning(`${value.name}`, 'This user is already in the contact list.', 'OK')\n      : dispatch(addContactThunk(value));\n  };\n\n  return (\n    <Section title=\"Contacts\">\n      <Formik\n        initialValues={initialValues}\n        validationSchema={contactSchema}\n        onSubmit={hendleSubmit}\n      >\n        <FormStyled autoComplete=\"off\">\n          <Box alignItems=\"flex-start\" flexDirection=\"column\" as=\"label\">\n            <Text fontSize=\"m\" color=\"black\" as=\"span\">\n              Name\n            </Text>\n            <FieldStyled\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <FormError name=\"name\" />\n          </Box>\n          <Box alignItems=\"flex-start\" flexDirection=\"column\" as=\"label\">\n            <Text fontSize=\"m\" color=\"black\" as=\"span\">\n              Number\n            </Text>\n            <FieldStyled\n              type=\"tel\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <FormError name=\"number\" />\n          </Box>\n          <ButtonStyled type=\"submit\">\n            <BsFillPersonPlusFill size={20} />\n            Add contact\n          </ButtonStyled>\n        </FormStyled>\n      </Formik>\n    </Section>\n  );\n};\n","import styled from 'styled-components';\n\nexport const InputStyled = styled.input`\n  background-color: #e9eaf7;\n  width: 650px;\n  height: 35px;\n  padding: 0 10px 0 10px;\n\n  border: 1px solid #a1abb6;\n  outline: none;\n\n  color: #181455;\n  font-size: ${({ theme }) => theme.fontSizes.s};\n\n  ::placeholder {\n    font-size: 12px;\n    color: #181455;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()));\n  }\n);\n","import styled from 'styled-components';\nimport { FaUser } from 'react-icons/fa';\n\nexport const IconUser = styled(FaUser)`\n  width: 18px;\n  height: 18px;\n\n  color: ${({ theme }) => theme.colors.button};\n`;\n\nexport const ButtonTrash = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 40px;\n  height: 30px;\n  padding: 10px;\n\n  border: none;\n  background-color: transparent;\n  color: ${({ theme }) => theme.colors.button};\n\n  cursor: pointer;\n  transition: color var(--main-hover-animation);\n\n  &:hover,\n  &:focus {\n    color: ${({ theme }) => theme.colors.buttonHoverTrash};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { FaTrash } from 'react-icons/fa';\nimport { FcCellPhone } from 'react-icons/fc';\n\nimport { Box } from 'services/styles/Box';\nimport { Text } from 'services/styles/Text';\nimport { IconUser, ButtonTrash } from 'components/Contact/Contact.styled';\n\nexport const Contact = ({ contact: { id, name, number }, onRemoveContact }) => {\n  return (\n    <Box justifyContent=\"space-around\" width=\"650px\" bg=\"white\" as=\"li\">\n      <Box gridGap={4} justifyContent=\"flex-start\" width=\"200px\">\n        <IconUser />\n        <Text fontSize=\"m\" fontWeight=\"bold\" color=\"black\">\n          {name}\n        </Text>\n      </Box>\n      <Box gridGap={3} justifyContent=\"flex-start\" width=\"200px\">\n        <FcCellPhone />\n        <Text fontSize=\"m\" fontWeight=\"bold\" color=\"black\">\n          {number}\n        </Text>\n      </Box>\n      <ButtonTrash as=\"button\" type=\"button\" onClick={() => onRemoveContact(id)}>\n        <FaTrash />\n      </ButtonTrash>\n    </Box>\n  );\n};\n\nContact.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nimport { Contact } from 'components/Contact/Contact';\nimport { Box } from 'services/styles/Box';\nimport { deleteContactThunk } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const handleRemoveContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n\n  return (\n    <Box mt={4} flexDirection=\"column\" gridGap={4} as=\"ul\">\n      {filteredContacts.map(contact => (\n        <Contact key={contact.id} contact={contact} onRemoveContact={handleRemoveContact} />\n      ))}\n    </Box>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Text } from 'services/styles/Text';\n\nexport const Message = ({ text }) => {\n  return <Text>{text}</Text>;\n};\n\nMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { Box } from 'services/styles/Box';\nimport { Text } from 'services/styles/Text';\n\nimport { InputStyled } from 'components/Filter/Filter.styled';\n\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/contactsSlice';\nimport { Section } from 'components/Section/Section';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Message } from 'components/Message/Message';\n\nexport const Filter = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFieldFilter = ({ currentTarget: { value } }) => dispatch(setFilter(value));\n\n  return (\n    <Section title=\"Contacts List\">\n      <Box my={4} alignItems=\"flex-start\" flexDirection=\"column\" as=\"label\">\n        <Text fontSize=\"m\" color=\"black\">\n          Find contacts by name\n        </Text>\n        <InputStyled\n          type=\"text\"\n          value={filter}\n          placeholder=\"Enter name\"\n          name=\"filter\"\n          onChange={changeFieldFilter}\n        />\n      </Box>\n      {contacts.length > 0 ? <ContactList /> : <Message text=\"Contact list is empty.\" />}\n    </Section>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchContactsThunk } from 'redux/contacts/operations';\n\nexport const ContactsPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ErrorText","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","red","_ref2","fontSizes","s","FormError","name","_jsx","ErrorMessage","render","message","children","contactSchema","yup","shape","test","value","trim","required","max","number","matches","ContactForm","dispatch","useDispatch","contacts","useSelector","state","checkAndAddContact","some","contact","toLowerCase","Report","concat","addContactThunk","Section","title","Formik","initialValues","validationSchema","onSubmit","resetForm","_jsxs","FormStyled","autoComplete","Box","alignItems","flexDirection","as","Text","fontSize","color","FieldStyled","type","ButtonStyled","BsFillPersonPlusFill","size","InputStyled","selectContacts","selectFilter","filter","selectFilteredContacts","createSelector","includes","IconUser","FaUser","button","ButtonTrash","_templateObject2","_ref3","buttonHoverTrash","Contact","_ref$contact","id","onRemoveContact","justifyContent","width","bg","gridGap","fontWeight","FcCellPhone","onClick","FaTrash","ContactList","filteredContacts","handleRemoveContact","contactId","deleteContactThunk","mt","map","Message","text","Filter","my","placeholder","onChange","currentTarget","setFilter","length","ContactsPage","useEffect","fetchContactsThunk","_Fragment"],"sourceRoot":""}