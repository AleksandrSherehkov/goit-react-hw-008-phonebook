{"version":3,"file":"static/js/206.efa15645.chunk.js","mappings":"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","sources":["components/FormError/FormError.styled.js","components/FormError/FormError.jsx","services/validation/validationRegisterSchema.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorText = styled.p`\n  color: ${({ theme }) => theme.colors.red};\n  font-style: italic;\n  font-size: ${({ theme }) => theme.fontSizes.s};\n`;\n","import PropTypes from 'prop-types';\nimport { ErrorMessage } from 'formik';\nimport { ErrorText } from 'components/FormError/FormError.styled';\n\nexport const FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>} />;\n};\n\nFormError.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n","import * as yup from 'yup';\n\nexport const registerSchema = yup.object().shape({\n  name: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  email: yup\n    .string()\n    .email('Please enter a valid email address')\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  password: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .min(6, 'Password must contain at least 6 characters')\n    .max(20, 'Password must contain a maximum of 20 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,20}$/,\n      'Password must contain at least one uppercase letter, one lowercase letter and one number'\n    ),\n});\n","import { ButtonStyled, FieldStyled, FormStyled } from 'components/ContactForm/ContactForm.styled';\nimport { FormError } from 'components/FormError/FormError';\nimport { Section } from 'components/Section/Section';\nimport { Formik } from 'formik';\nimport { BsFillPersonPlusFill } from 'react-icons/bs';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Box } from 'services/styles/Box';\nimport { Text } from 'services/styles/Text';\nimport { registerSchema } from 'services/validation/validationRegisterSchema';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const hendleSubmit = (value, { resetForm }) => {\n    dispatch(register(value));\n\n    resetForm();\n  };\n  return (\n    <Section title=\"Registration\">\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={hendleSubmit}\n      >\n        <FormStyled autoComplete=\"off\">\n          <Box alignItems=\"flex-start\" flexDirection=\"column\" as=\"label\">\n            <Text fontSize=\"m\" color=\"black\" as=\"span\">\n              Name\n            </Text>\n            <FieldStyled\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <FormError name=\"name\" />\n          </Box>\n          <Box alignItems=\"flex-start\" flexDirection=\"column\" as=\"label\">\n            <Text fontSize=\"m\" color=\"black\" as=\"span\">\n              Email\n            </Text>\n            <FieldStyled type=\"text\" name=\"email\" title=\"Valid mail\" required />\n            <FormError name=\"email\" />\n          </Box>\n          <Box alignItems=\"flex-start\" flexDirection=\"column\" as=\"label\">\n            <Text fontSize=\"m\" color=\"black\" as=\"span\">\n              Password\n            </Text>\n            <FieldStyled\n              type=\"tel\"\n              name=\"password\"\n              title=\"Phone number must be digits and can contain spaces, dashes\"\n              required\n            />\n            <FormError name=\"password\" />\n          </Box>\n          <ButtonStyled type=\"submit\">\n            <BsFillPersonPlusFill size={20} />\n            Registration\n          </ButtonStyled>\n        </FormStyled>\n      </Formik>\n    </Section>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n"],"names":["ErrorText","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","red","_ref2","fontSizes","s","FormError","name","_jsx","ErrorMessage","render","message","children","registerSchema","yup","shape","test","value","trim","required","max","email","password","min","matches","RegisterForm","dispatch","useDispatch","Section","title","Formik","initialValues","validationSchema","onSubmit","resetForm","register","_jsxs","FormStyled","autoComplete","Box","alignItems","flexDirection","as","Text","fontSize","color","FieldStyled","type","ButtonStyled","BsFillPersonPlusFill","size"],"sourceRoot":""}